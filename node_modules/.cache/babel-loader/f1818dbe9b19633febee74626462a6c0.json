{"ast":null,"code":"var _jsxFileName = \"J:\\\\Karolina\\\\react projects\\\\would-you-rather\\\\src\\\\components\\\\QuestionCard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport { handleSaveAnswer } from '../actions/shared';\n\nclass QuestionCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      option: ''\n    };\n\n    this.addOptionToState = e => {\n      this.setState({\n        option: e.target.value\n      });\n    };\n\n    this.handleSubmitAnswer = e => {\n      e.preventDefault();\n      const _this$props = this.props,\n            dispatch = _this$props.dispatch,\n            logedUserId = _this$props.logedUserId; // const { id } = this.props.location.state\n\n      const id = this.props.match.params.id;\n      const option = this.state.option;\n      dispatch(handleSaveAnswer(logedUserId, id, option)).then(() => this.setState({\n        answered: true\n      }));\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          question = _this$props2.question,\n          logedUserAnswers = _this$props2.logedUserAnswers,\n          avatars = _this$props2.avatars,\n          answered = _this$props2.answered,\n          qId = _this$props2.qId;\n    const author = question.author,\n          optionOne = question.optionOne,\n          optionTwo = question.optionTwo;\n    console.log(author);\n    const userAvatar = avatars.filter(a => a[0] === author);\n    const answer = logedUserAnswers[qId];\n    console.log(userAvatar);\n    console.log(optionOne.text);\n    console.log(optionOne.votes.length);\n    console.log(answered);\n    const nrAnsOne = optionOne.votes.length;\n    const nrAnsTwo = optionTwo.votes.length;\n    const nrAns = nrAnsOne + nrAnsTwo;\n\n    const percent = (partialValue, totalValue) => 100 * partialValue / totalValue;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questionAuthor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"author\"), React.createElement(\"div\", {\n      className: \"user-avatar\",\n      style: {\n        backgroundColor: 'LightSteelBlue',\n        backgroundSize: '80px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps(state, props) {\n  const questions = state.questions,\n        logedUser = state.logedUser,\n        users = state.users;\n  const qId = props.match.params.id.trim();\n  console.log(qId);\n  const logedUserId = logedUser.id;\n  const question = questions[qId];\n  const logedUserAnswers = users[logedUserId].answers;\n  const answer = logedUserAnswers[qId];\n  const usersId = Object.keys(users);\n  const avatars = [];\n  usersId.map(user => avatars.push([user, users[user].avatarURL])); // const answered = logedUserAnswers.includes(qId)\n\n  console.log(logedUserAnswers.includes(qId));\n  return {\n    logedUserId,\n    questions,\n    logedUserAnswers,\n    answer,\n    avatars,\n    question,\n    answered,\n    qId\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionCard); // const answer= logedUserAnswers[id]","map":{"version":3,"sources":["J:/Karolina/react projects/would-you-rather/src/components/QuestionCard.js"],"names":["React","Component","connect","Menu","handleSaveAnswer","QuestionCard","state","option","addOptionToState","e","setState","target","value","handleSubmitAnswer","preventDefault","props","dispatch","logedUserId","id","match","params","then","answered","render","question","logedUserAnswers","avatars","qId","author","optionOne","optionTwo","console","log","userAvatar","filter","a","answer","text","votes","length","nrAnsOne","nrAnsTwo","nrAns","percent","partialValue","totalValue","backgroundColor","backgroundSize","mapStateToProps","questions","logedUser","users","trim","answers","usersId","Object","keys","map","user","push","avatarURL","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;AAGA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCK,KADmC,GAC5B;AACLC,MAAAA,MAAM,EAAE;AADH,KAD4B;;AAAA,SAKnCC,gBALmC,GAKfC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,MAAM,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAnB,OAAd;AACL,KAPkC;;AAAA,SASnCC,kBATmC,GASbJ,CAAD,IAAO;AAC1BA,MAAAA,CAAC,CAACK,cAAF;AAD0B,0BAEQ,KAAKC,KAFb;AAAA,YAElBC,QAFkB,eAElBA,QAFkB;AAAA,YAERC,WAFQ,eAERA,WAFQ,EAG1B;;AACA,YAAMC,EAAE,GAAG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBF,EAAnC;AAJ0B,YAKlBX,MALkB,GAKP,KAAKD,KALE,CAKlBC,MALkB;AAO1BS,MAAAA,QAAQ,CAACZ,gBAAgB,CAACa,WAAD,EAAcC,EAAd,EAAkBX,MAAlB,CAAjB,CAAR,CACCc,IADD,CACM,MAAM,KAAKX,QAAL,CAAc;AAAEY,QAAAA,QAAQ,EAAE;AAAZ,OAAd,CADZ;AAED,KAlBkC;AAAA;;AAoBnCC,EAAAA,MAAM,GAAG;AAAA,yBACqD,KAAKR,KAD1D;AAAA,UACCS,QADD,gBACCA,QADD;AAAA,UACUC,gBADV,gBACUA,gBADV;AAAA,UAC4BC,OAD5B,gBAC4BA,OAD5B;AAAA,UACqCJ,QADrC,gBACqCA,QADrC;AAAA,UAC+CK,GAD/C,gBAC+CA,GAD/C;AAAA,UAEDC,MAFC,GAE+BJ,QAF/B,CAEDI,MAFC;AAAA,UAEOC,SAFP,GAE+BL,QAF/B,CAEOK,SAFP;AAAA,UAEkBC,SAFlB,GAE+BN,QAF/B,CAEkBM,SAFlB;AAGRC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAEA,UAAMK,UAAU,GAAGP,OAAO,CAACQ,MAAR,CACfC,CAAD,IAAQA,CAAC,CAAC,CAAD,CAAD,KAAOP,MADC,CAAnB;AAIC,UAAMQ,MAAM,GAAEX,gBAAgB,CAACE,GAAD,CAA9B;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAS,CAACQ,IAAtB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAS,CAACS,KAAV,CAAgBC,MAA5B;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AAEA,UAAMkB,QAAQ,GAAGX,SAAS,CAACS,KAAV,CAAgBC,MAAjC;AACA,UAAME,QAAQ,GAAGX,SAAS,CAACQ,KAAV,CAAgBC,MAAjC;AACA,UAAMG,KAAK,GAAGF,QAAQ,GAAGC,QAAzB;;AAEA,UAAME,OAAO,GAAE,CAACC,YAAD,EAAeC,UAAf,KACX,MAAMD,YAAP,GAAuBC,UAD1B;;AAIG,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AACC,MAAA,KAAK,EAAG;AACDC,QAAAA,eAAe,EAAE,gBADhB;AAGDC,QAAAA,cAAc,EAAE;AAHf,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFD,CAFH,CADF;AAkBJ;;AA9DkC;;AAiErC,SAASC,eAAT,CAAyB1C,KAAzB,EAAgCS,KAAhC,EAAuC;AAAA,QAC9BkC,SAD8B,GACC3C,KADD,CAC9B2C,SAD8B;AAAA,QACnBC,SADmB,GACC5C,KADD,CACnB4C,SADmB;AAAA,QACRC,KADQ,GACC7C,KADD,CACR6C,KADQ;AAErC,QAAMxB,GAAG,GAAGZ,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBF,EAAnB,CAAsBkC,IAAtB,EAAZ;AACArB,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,QAAMV,WAAW,GAAGiC,SAAS,CAAChC,EAA9B;AAEA,QAAMM,QAAQ,GAAGyB,SAAS,CAACtB,GAAD,CAA1B;AAEA,QAAMF,gBAAgB,GAAG0B,KAAK,CAAClC,WAAD,CAAL,CAAmBoC,OAA5C;AACA,QAAMjB,MAAM,GAAEX,gBAAgB,CAACE,GAAD,CAA9B;AAEA,QAAM2B,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAhB;AAEA,QAAMzB,OAAO,GAAG,EAAhB;AACA4B,EAAAA,OAAO,CAACG,GAAR,CAAaC,IAAD,IACVhC,OAAO,CAACiC,IAAR,CAAa,CAACD,IAAD,EAAMP,KAAK,CAACO,IAAD,CAAL,CAAYE,SAAlB,CAAb,CADF,EAdqC,CAiBrC;;AACA7B,EAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAgB,CAACoC,QAAjB,CAA0BlC,GAA1B,CAAZ;AAIA,SAAO;AACLV,IAAAA,WADK;AAELgC,IAAAA,SAFK;AAGLxB,IAAAA,gBAHK;AAILW,IAAAA,MAJK;AAKLV,IAAAA,OALK;AAMLF,IAAAA,QANK;AAOLF,IAAAA,QAPK;AAQLK,IAAAA;AARK,GAAP;AAWD;;AAED,eAAezB,OAAO,CAAC8C,eAAD,CAAP,CAA0B3C,YAA1B,CAAf,C,CAIA","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Menu from './Menu'\r\nimport { handleSaveAnswer } from '../actions/shared'\r\n\r\n\r\nclass QuestionCard extends Component {\r\n  state= {\r\n    option: '',\r\n  }\r\n\r\n  addOptionToState = (e) => {\r\n        this.setState({ option: e.target.value })\r\n  }\r\n\r\n  handleSubmitAnswer = (e) => {\r\n    e.preventDefault()\r\n    const { dispatch, logedUserId } = this.props\r\n    // const { id } = this.props.location.state\r\n    const id = this.props.match.params.id\r\n    const { option } = this.state\r\n\r\n    dispatch(handleSaveAnswer(logedUserId, id, option ))\r\n    .then(() => this.setState({ answered: true }))\r\n  }\r\n\r\n  render() {\r\n    const { question,logedUserAnswers, avatars, answered, qId}= this.props\r\n   const {author, optionOne, optionTwo} = question\r\n   console.log(author)\r\n\r\n   const userAvatar = avatars.filter(\r\n      (a) => (a[0]===author)\r\n    )\r\n\r\n    const answer= logedUserAnswers[qId]\r\n\r\n    console.log(userAvatar)\r\n    console.log(optionOne.text)\r\n    console.log(optionOne.votes.length)\r\n    console.log(answered)\r\n\r\n    const nrAnsOne = optionOne.votes.length\r\n    const nrAnsTwo = optionTwo.votes.length\r\n    const nrAns = nrAnsOne + nrAnsTwo\r\n\r\n    const percent= (partialValue, totalValue) => (\r\n       (100 * partialValue) / totalValue\r\n     )\r\n\r\n       return(\r\n         <div >\r\n           <Menu />\r\n            <div className='container card'>\r\n\r\n             <div className='questionAuthor'>\r\n               <p >author</p>\r\n               <div className='user-avatar'\r\n                style= {{\r\n                       backgroundColor: 'LightSteelBlue' ,\r\n\r\n                       backgroundSize: '80px 100px',\r\n                     }}\r\n               ></div>\r\n             </div>\r\n           </div>\r\n       </div>\r\n       )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, props) {\r\n  const {questions, logedUser, users} = state\r\n  const qId = props.match.params.id.trim()\r\n  console.log(qId)\r\n  const logedUserId = logedUser.id\r\n\r\n  const question = questions[qId]\r\n\r\n  const logedUserAnswers = users[logedUserId].answers\r\n  const answer= logedUserAnswers[qId]\r\n\r\n  const usersId = Object.keys(users)\r\n\r\n  const avatars = []\r\n  usersId.map((user) =>\r\n    avatars.push([user,users[user].avatarURL ])\r\n  )\r\n  // const answered = logedUserAnswers.includes(qId)\r\n  console.log(logedUserAnswers.includes(qId))\r\n\r\n\r\n\r\n  return {\r\n    logedUserId,\r\n    questions,\r\n    logedUserAnswers,\r\n    answer,\r\n    avatars,\r\n    question,\r\n    answered,\r\n    qId\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps) (QuestionCard)\r\n\r\n\r\n\r\n// const answer= logedUserAnswers[id]\r\n"]},"metadata":{},"sourceType":"module"}