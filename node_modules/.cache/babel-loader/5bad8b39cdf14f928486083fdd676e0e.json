{"ast":null,"code":"var _jsxFileName = \"J:\\\\Karolina\\\\react projects\\\\would-you-rather\\\\src\\\\components\\\\QuestionCard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport { handleSaveAnswer } from '../actions/shared';\nimport { Redirect } from 'react-router-dom';\n\nclass QuestionCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      option: ''\n    };\n\n    this.addOptionToState = e => {\n      this.setState({\n        option: e.target.value\n      });\n    };\n\n    this.handleSubmitAnswer = e => {\n      e.preventDefault();\n      const _this$props = this.props,\n            dispatch = _this$props.dispatch,\n            logedUserId = _this$props.logedUserId,\n            qId = _this$props.qId;\n      const option = this.state.option;\n      dispatch(handleSaveAnswer(logedUserId, qId, option));\n    };\n  }\n\n  render() {\n    const question = this.props.question;\n\n    if (question === undefined) {\n      return React.createElement(Redirect, {\n        to: \"/Error 404\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    } else {\n      const _this$props2 = this.props,\n            question = _this$props2.question,\n            logedUserAnswers = _this$props2.logedUserAnswers,\n            avatars = _this$props2.avatars,\n            answered = _this$props2.answered,\n            qId = _this$props2.qId;\n      const author = question.author,\n            optionOne = question.optionOne,\n            optionTwo = question.optionTwo;\n      const userAvatar = avatars.filter(a => a[0] === author);\n      const answer = logedUserAnswers[qId];\n      const nrAnsOne = optionOne.votes.length;\n      const nrAnsTwo = optionTwo.votes.length;\n      const nrAns = nrAnsOne + nrAnsTwo;\n\n      const percent = (partialValue, totalValue) => 100 * partialValue / totalValue;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, answered ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"special-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"You would rather...\"), answer === optionOne.text ? React.createElement(\"p\", {\n        className: \"special-text option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, optionOne.text) : React.createElement(\"p\", {\n        className: \"special-text option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, optionTwo.text), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, nrAnsOne, nrAnsOne === 1 ? ' user' : ' users', \" / \", percent(nrAnsOne, nrAns), \"% of users choose: \", optionOne.text), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, nrAnsTwo, \" \", nrAnsTwo === 1 ? ' user' : ' users', \" / \", percent(nrAnsTwo, nrAns), \"% of users choose: \", optionTwo.text), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"special-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Would you rather...\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"form-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"option\",\n        value: \"optionOne\",\n        onChange: this.addOptionToState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, optionOne.text), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"option\",\n        value: \"optionTwo\",\n        onChange: this.addOptionToState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, optionTwo.text), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Vote\",\n        onClick: this.handleSubmitAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"questionAuthor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, author), React.createElement(\"div\", {\n        className: \"user-avatar\",\n        style: {\n          backgroundColor: 'LightSteelBlue',\n          backgroundImage: `url(${userAvatar[0][1]})`,\n          backgroundSize: '80px 100px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }))));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state, props) {\n  const questions = state.questions,\n        logedUser = state.logedUser,\n        users = state.users;\n  const qId = props.match.params.id.trim();\n  console.log(qId);\n  const logedUserId = logedUser.id;\n  const question = questions[qId];\n  const logedUserAnswers = users[logedUserId].answers;\n  const usersId = Object.keys(users);\n  const avatars = [];\n  usersId.map(user => avatars.push([user, users[user].avatarURL]));\n  const answered = Object.keys(logedUserAnswers).includes(qId);\n  return {\n    logedUserId,\n    questions,\n    logedUserAnswers,\n    avatars,\n    question,\n    answered,\n    qId\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionCard);","map":{"version":3,"sources":["J:/Karolina/react projects/would-you-rather/src/components/QuestionCard.js"],"names":["React","Component","connect","Menu","handleSaveAnswer","Redirect","QuestionCard","state","option","addOptionToState","e","setState","target","value","handleSubmitAnswer","preventDefault","props","dispatch","logedUserId","qId","render","question","undefined","logedUserAnswers","avatars","answered","author","optionOne","optionTwo","userAvatar","filter","a","answer","nrAnsOne","votes","length","nrAnsTwo","nrAns","percent","partialValue","totalValue","text","backgroundColor","backgroundImage","backgroundSize","mapStateToProps","questions","logedUser","users","match","params","id","trim","console","log","answers","usersId","Object","keys","map","user","push","avatarURL","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Menu from './Menu'\r\nimport { handleSaveAnswer } from '../actions/shared'\r\nimport {Redirect } from 'react-router-dom'\r\n\r\n\r\nclass QuestionCard extends Component {\r\n  state= {\r\n    option: '',\r\n  }\r\n\r\n  addOptionToState = (e) => {\r\n        this.setState({ option: e.target.value })\r\n  }\r\n\r\n  handleSubmitAnswer = (e) => {\r\n    e.preventDefault()\r\n    const { dispatch, logedUserId, qId } = this.props\r\n    const { option } = this.state\r\n    dispatch(handleSaveAnswer(logedUserId, qId, option ))\r\n  }\r\n\r\n  render() {\r\n\r\n\r\nconst { question}= this.props\r\n       if (question === undefined) {\r\n         return (\r\n           <Redirect to= '/Error 404' />\r\n         )\r\n       }\r\n       else {\r\n         const { question, logedUserAnswers, avatars, answered, qId}= this.props\r\n          const {author, optionOne, optionTwo} = question\r\n\r\n          const userAvatar = avatars.filter(\r\n             (a) => (a[0]===author)\r\n           )\r\n           const answer= logedUserAnswers[qId]\r\n\r\n           const nrAnsOne = optionOne.votes.length\r\n           const nrAnsTwo = optionTwo.votes.length\r\n           const nrAns = nrAnsOne + nrAnsTwo\r\n\r\n           const percent= (partialValue, totalValue) => (\r\n              (100 * partialValue) / totalValue\r\n            )\r\n         return (\r\n         <div >\r\n           <Menu />\r\n            <div className='container card'>\r\n              {(answered) ?\r\n              <React.Fragment>\r\n                <h2 className='special-text'>You would rather...</h2>\r\n                  {(answer===optionOne.text) ?\r\n                    <p className='special-text option'>{optionOne.text}</p>\r\n                  : <p className='special-text option'>{optionTwo.text}</p>}\r\n                  <p>{nrAnsOne}{(nrAnsOne === 1) ? ' user' : ' users'} / {percent(nrAnsOne, nrAns)}% of users choose: {optionOne.text}</p>\r\n                  <p>{nrAnsTwo} {(nrAnsTwo === 1) ? ' user' : ' users'} / {percent(nrAnsTwo, nrAns)}% of users choose: {optionTwo.text}</p>\r\n                  <hr />\r\n              </React.Fragment>\r\n              :\r\n              <React.Fragment>\r\n                <h2 className='special-text'>Would you rather...</h2>\r\n                <p></p>\r\n                  <div className='form-vote'>\r\n                     <input type='radio' name= 'option' value='optionOne'onChange= {this.addOptionToState} />\r\n                     <label>{optionOne.text}</label><br/>\r\n                     <input type='radio' name= 'option' value='optionTwo' onChange= {this.addOptionToState} />\r\n                     <label>{optionTwo.text}</label><br/>\r\n                     <input type='submit' value='Vote' onClick= {this.handleSubmitAnswer} />\r\n                  </div>\r\n                  <hr />\r\n              </React.Fragment>\r\n            }\r\n             <div className='questionAuthor'>\r\n               <p >{author}</p>\r\n               <div className='user-avatar'\r\n                style= {{\r\n                       backgroundColor: 'LightSteelBlue' ,\r\n                       backgroundImage: `url(${userAvatar[0][1]})`,\r\n                       backgroundSize: '80px 100px',\r\n                     }}\r\n               ></div>\r\n             </div>\r\n           </div>\r\n       </div>\r\n     )\r\n       }\r\n\r\n\r\n}\r\n}\r\n\r\nfunction mapStateToProps(state, props) {\r\n  const {questions, logedUser, users} = state\r\n  const qId = props.match.params.id.trim()\r\n\r\n  console.log(qId)\r\n  const logedUserId = logedUser.id\r\n\r\n  const question = questions[qId]\r\n\r\n  const logedUserAnswers = users[logedUserId].answers\r\n\r\n\r\n  const usersId = Object.keys(users)\r\n\r\n  const avatars = []\r\n  usersId.map((user) =>\r\n    avatars.push([user,users[user].avatarURL ])\r\n  )\r\n  const answered = Object.keys(logedUserAnswers).includes(qId)\r\n\r\n  return {\r\n    logedUserId,\r\n    questions,\r\n    logedUserAnswers,\r\n    avatars,\r\n    question,\r\n    answered,\r\n    qId\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps) (QuestionCard)\r\n"]},"metadata":{},"sourceType":"module"}