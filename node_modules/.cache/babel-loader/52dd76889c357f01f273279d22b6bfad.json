{"ast":null,"code":"var _jsxFileName = \"J:\\\\Karolina\\\\react projects\\\\would-you-rather\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport QuestionList from './QuestionList';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seeQuestion: true,\n      linkText: 'Show Answered Questions'\n    };\n\n    this.toggleQuestions = () => {\n      this.state.seeQuestion ? this.setState({\n        seeQuestion: false,\n        linkText: 'Show Unanswered Questions'\n      }) : this.setState({\n        seeQuestion: true,\n        linkText: 'Show Answered Questions'\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          logedUserName = _this$props.logedUserName,\n          unanswered = _this$props.unanswered,\n          answered = _this$props.answered;\n    const _this$state = this.state,\n          seeQuestion = _this$state.seeQuestion,\n          linkText = _this$state.linkText;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"question-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"toggleQuestions\",\n      onClick: this.toggleQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, linkText))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const logedUser = state.logedUser,\n        questions = state.questions,\n        users = state.users;\n  const logedUserName = logedUser.name;\n  const questionsId = Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp);\n  const unansweredID = questionsId.filter(id => !questions[id].optionOne.votes.includes('johndoe') && !questions[id].optionTwo.votes.includes('johndoe'));\n  const answeredID = questionsId.filter(id => questions[id].optionOne.votes.includes('johndoe') || questions[id].optionTwo.votes.includes('johndoe'));\n  const unanswered = [];\n  unansweredID.map(id => {\n    unanswered.push([id, {\n      author: questions[id].author,\n      timestamp: questions[id].timestamp,\n      optionOne: questions[id].optionOne,\n      optionTwo: questions[id].optionTwo\n    }]);\n  });\n  const answered = [];\n  answeredID.map(id => {\n    const author = questions[id].author;\n    answered.push([id, {\n      author: author,\n      timestamp: questions[id].timestamp,\n      optionOne: questions[id].optionOne,\n      optionTwo: questions[id].optionTwo,\n      avatar: users[author].avatar\n    }]);\n  });\n  const userIdArray = Object.keys(users).sort();\n  return {\n    logedUserName,\n    unanswered,\n    answered\n  };\n}\n\nexport default connect(mapStateToProps)(Home); // const userAvatar = avatars.filter(\n//  (a) => (a[0]===author)\n// )\n// const optionOne= questionList[1].optionOne.text\n// const optionTwo= questionList[1].optionTwo.text\n// const answer= logedUserAnswers[id]\n// const nrAnsOne= questionList[1].optionOne.votes.length\n// const nrAnsTwo= questionList[1].optionTwo.votes.length\n// const nrAns = nrAnsOne + nrAnsTwo\n//\n//  const percent= (partialValue, totalValue) => (\n//    (100 * partialValue) / totalValue\n//  )\n// {(seeQuestion) ?\n//   <div>\n//     <QuestionList questionList={unanswered} text= 'Unanswert Questions' answered= {false} />\n//   </div>\n//   :\n//   <div>\n//     <QuestionList questionList={answered} text= 'Answert Questions'answered= {true}/>\n//   </div>\n//  }","map":{"version":3,"sources":["J:/Karolina/react projects/would-you-rather/src/components/Home.js"],"names":["React","Component","connect","Menu","QuestionList","Home","state","seeQuestion","linkText","toggleQuestions","setState","render","props","logedUserName","unanswered","answered","mapStateToProps","logedUser","questions","users","name","questionsId","Object","keys","sort","a","b","timestamp","unansweredID","filter","id","optionOne","votes","includes","optionTwo","answeredID","map","push","author","avatar","userIdArray"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACpB;AACLC,MAAAA,WAAW,EAAE,IADR;AAELC,MAAAA,QAAQ,EAAE;AAFL,KADoB;;AAAA,SAM3BC,eAN2B,GAMT,MAAM;AACrB,WAAKH,KAAL,CAAWC,WAAZ,GACE,KAAKG,QAAL,CAAc;AAACH,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAAd,CADF,GAGE,KAAKE,QAAL,CAAc;AAACH,QAAAA,WAAW,EAAE,IAAd;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAAd,CAHF;AAID,KAX0B;AAAA;;AAa3BG,EAAAA,MAAM,GAAI;AAAA,wBAE4C,KAAKC,KAFjD;AAAA,UAEGC,aAFH,eAEGA,aAFH;AAAA,UAEkBC,UAFlB,eAEkBA,UAFlB;AAAA,UAE8BC,QAF9B,eAE8BA,QAF9B;AAAA,wBAG4B,KAAKT,KAHjC;AAAA,UAGGC,WAHH,eAGGA,WAHH;AAAA,UAGgBC,QAHhB,eAGgBA,QAHhB;AAKN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAS,MAAA,SAAS,EAAE,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,EAAE,EAAE,iBAAR;AAA0B,MAAA,OAAO,EAAG,KAAKC,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4DD,QAA5D,CADF,CADF,CAHF,CADF;AAcH;;AAhC0B;;AAmC7B,SAASQ,eAAT,CAA0BV,KAA1B,EAAiC;AAAA,QACxBW,SADwB,GACOX,KADP,CACxBW,SADwB;AAAA,QACbC,SADa,GACOZ,KADP,CACbY,SADa;AAAA,QACFC,KADE,GACOb,KADP,CACFa,KADE;AAE/B,QAAMN,aAAa,GAAGI,SAAS,CAACG,IAAhC;AACA,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EAAuBM,IAAvB,CAA4B,CAACC,CAAD,EAAGC,CAAH,KAASR,SAAS,CAACQ,CAAD,CAAT,CAAaC,SAAb,GAAyBT,SAAS,CAACO,CAAD,CAAT,CAAaE,SAA3E,CAApB;AAEA,QAAMC,YAAY,GAAGP,WAAW,CAACQ,MAAZ,CAClBC,EAAD,IACE,CAAEZ,SAAS,CAACY,EAAD,CAAT,CAAcC,SAAd,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuC,SAAvC,CAAF,IAAwD,CAAEf,SAAS,CAACY,EAAD,CAAT,CAAcI,SAAd,CAAwBF,KAAxB,CAA8BC,QAA9B,CAAuC,SAAvC,CAFzC,CAArB;AAKA,QAAME,UAAU,GAAGd,WAAW,CAACQ,MAAZ,CAChBC,EAAD,IACEZ,SAAS,CAACY,EAAD,CAAT,CAAcC,SAAd,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuC,SAAvC,KAAqDf,SAAS,CAACY,EAAD,CAAT,CAAcI,SAAd,CAAwBF,KAAxB,CAA8BC,QAA9B,CAAuC,SAAvC,CAFtC,CAAnB;AAMA,QAAMnB,UAAU,GAAG,EAAnB;AACAc,EAAAA,YAAY,CAACQ,GAAb,CAAkBN,EAAD,IAAQ;AACvBhB,IAAAA,UAAU,CAACuB,IAAX,CAAgB,CAACP,EAAD,EAAI;AAACQ,MAAAA,MAAM,EAAEpB,SAAS,CAACY,EAAD,CAAT,CAAcQ,MAAvB;AAA+BX,MAAAA,SAAS,EAAET,SAAS,CAACY,EAAD,CAAT,CAAcH,SAAxD;AAAmEI,MAAAA,SAAS,EAAEb,SAAS,CAACY,EAAD,CAAT,CAAcC,SAA5F;AAAuGG,MAAAA,SAAS,EAAEhB,SAAS,CAACY,EAAD,CAAT,CAAcI;AAAhI,KAAJ,CAAhB;AACD,GAFD;AAGA,QAAMnB,QAAQ,GAAG,EAAjB;AACAoB,EAAAA,UAAU,CAACC,GAAX,CAAgBN,EAAD,IAAQ;AACrB,UAAMQ,MAAM,GAAGpB,SAAS,CAACY,EAAD,CAAT,CAAcQ,MAA7B;AACAvB,IAAAA,QAAQ,CAACsB,IAAT,CAAc,CAACP,EAAD,EAAI;AAACQ,MAAAA,MAAM,EAAEA,MAAT;AAAiBX,MAAAA,SAAS,EAAET,SAAS,CAACY,EAAD,CAAT,CAAcH,SAA1C;AAAqDI,MAAAA,SAAS,EAAEb,SAAS,CAACY,EAAD,CAAT,CAAcC,SAA9E;AAAyFG,MAAAA,SAAS,EAAEhB,SAAS,CAACY,EAAD,CAAT,CAAcI,SAAlH;AAA6HK,MAAAA,MAAM,EAAEpB,KAAK,CAACmB,MAAD,CAAL,CAAcC;AAAnJ,KAAJ,CAAd;AACD,GAHD;AAKA,QAAMC,WAAW,GAAGlB,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,IAAnB,EAApB;AAGA,SAAO;AACLX,IAAAA,aADK;AAELC,IAAAA,UAFK;AAGLC,IAAAA;AAHK,GAAP;AAMD;;AACD,eAAeb,OAAO,CAACc,eAAD,CAAP,CAAyBX,IAAzB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Menu from './Menu'\r\nimport QuestionList from './QuestionList'\r\n\r\nclass Home extends Component {\r\n  state= {\r\n    seeQuestion: true,\r\n    linkText: 'Show Answered Questions'\r\n  }\r\n\r\n  toggleQuestions = () => {\r\n    (this.state.seeQuestion) ?\r\n      this.setState({seeQuestion: false, linkText: 'Show Unanswered Questions',})\r\n    :\r\n      this.setState({seeQuestion: true, linkText: 'Show Answered Questions',})\r\n  }\r\n\r\n  render () {\r\n\r\n       const { logedUserName, unanswered, answered, } = this.props\r\n       const { seeQuestion, linkText }= this.state\r\n\r\n      return (\r\n        <div>\r\n          <Menu />\r\n\r\n          <div className= 'container' >\r\n            <section className= 'question-toggle'>\r\n              <p  id= 'toggleQuestions' onClick={ this.toggleQuestions }>{linkText}</p>\r\n            </section>\r\n\r\n\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  const {logedUser, questions, users } =state\r\n  const logedUserName = logedUser.name\r\n  const questionsId = Object.keys(questions).sort((a,b) => questions[b].timestamp - questions[a].timestamp)\r\n\r\n  const unansweredID = questionsId.filter(\r\n    (id)=> (\r\n      !(questions[id].optionOne.votes.includes('johndoe')) && !(questions[id].optionTwo.votes.includes('johndoe'))\r\n    )\r\n  )\r\n  const answeredID = questionsId.filter(\r\n    (id)=> (\r\n      questions[id].optionOne.votes.includes('johndoe') || questions[id].optionTwo.votes.includes('johndoe')\r\n    )\r\n  )\r\n\r\n  const unanswered = []\r\n  unansweredID.map((id) => {\r\n    unanswered.push([id,{author: questions[id].author, timestamp: questions[id].timestamp, optionOne: questions[id].optionOne, optionTwo: questions[id].optionTwo}])\r\n  })\r\n  const answered = []\r\n  answeredID.map((id) => {\r\n    const author = questions[id].author\r\n    answered.push([id,{author: author, timestamp: questions[id].timestamp, optionOne: questions[id].optionOne, optionTwo: questions[id].optionTwo, avatar: users[author].avatar}])\r\n  })\r\n\r\n  const userIdArray = Object.keys(users).sort()\r\n\r\n\r\n  return {\r\n    logedUserName,\r\n    unanswered,\r\n    answered,\r\n\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Home)\r\n\r\n// const userAvatar = avatars.filter(\r\n//  (a) => (a[0]===author)\r\n// )\r\n// const optionOne= questionList[1].optionOne.text\r\n// const optionTwo= questionList[1].optionTwo.text\r\n// const answer= logedUserAnswers[id]\r\n// const nrAnsOne= questionList[1].optionOne.votes.length\r\n// const nrAnsTwo= questionList[1].optionTwo.votes.length\r\n// const nrAns = nrAnsOne + nrAnsTwo\r\n//\r\n//  const percent= (partialValue, totalValue) => (\r\n//    (100 * partialValue) / totalValue\r\n//  )\r\n\r\n\r\n// {(seeQuestion) ?\r\n//   <div>\r\n//     <QuestionList questionList={unanswered} text= 'Unanswert Questions' answered= {false} />\r\n//   </div>\r\n//   :\r\n//   <div>\r\n//     <QuestionList questionList={answered} text= 'Answert Questions'answered= {true}/>\r\n//   </div>\r\n//  }\r\n"]},"metadata":{},"sourceType":"module"}