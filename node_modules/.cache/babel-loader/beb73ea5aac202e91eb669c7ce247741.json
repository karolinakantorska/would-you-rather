{"ast":null,"code":"var _jsxFileName = \"J:\\\\Karolina\\\\react projects\\\\would-you-rather\\\\src\\\\components\\\\QuestionCard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport { handleSaveAnswer } from '../actions/shared';\n\nclass QuestionCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      option: '',\n      answered: this.props.location.state.answered\n    };\n\n    this.addOptionToState = e => {\n      this.setState({\n        option: e.target.value\n      });\n    };\n\n    this.handleSubmitAnswer = e => {\n      e.preventDefault();\n      const _this$props = this.props,\n            dispatch = _this$props.dispatch,\n            logedUserId = _this$props.logedUserId; // const { id } = this.props.location.state\n\n      const id = this.props.match.params.id;\n      const option = this.state.option;\n      dispatch(handleSaveAnswer(logedUserId, id, option)).then(() => this.setState({\n        answered: true\n      }));\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          questions = _this$props2.questions,\n          logedUserAnswers = _this$props2.logedUserAnswers,\n          avatars = _this$props2.avatars,\n          qId = _this$props2.qId;\n    const answered = this.state.answered;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, qId), React.createElement(\"div\", {\n      className: \"questionAuthor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"author\"), React.createElement(\"div\", {\n      className: \"user-avatar\",\n      style: {\n        backgroundColor: 'LightSteelBlue',\n        backgroundSize: '80px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps(state, props) {\n  const questions = state.questions,\n        logedUser = state.logedUser,\n        users = state.users;\n  const qId = props.match.params.id.trim();\n  console.log(qId);\n  const logedUserId = logedUser.id;\n  const question = questions[qId];\n  const logedUserAnswers = users[logedUserId].answers;\n  const usersId = Object.keys(users);\n  const avatars = [];\n  usersId.map(user => avatars.push([user, users[user].avatarURL]));\n  return {\n    logedUserId,\n    questions,\n    logedUserAnswers,\n    avatars,\n    qId,\n    question\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionCard); // const author= questions[id].author\n//\n// const userAvatar = avatars.filter(\n//   (a) => (a[0]===author)\n// )\n//\n// const optionOne= questions[id].optionOne.text\n// const optionTwo= questions[id].optionTwo.text\n// const answer= logedUserAnswers[id]\n// const nrAnsOne= questions[id].optionOne.votes.length\n// const nrAnsTwo= questions[id].optionTwo.votes.length\n// const nrAns = nrAnsOne + nrAnsTwo\n//\n// const percent= (partialValue, totalValue) => (\n//   (100 * partialValue) / totalValue\n// )","map":{"version":3,"sources":["J:/Karolina/react projects/would-you-rather/src/components/QuestionCard.js"],"names":["React","Component","connect","Menu","handleSaveAnswer","QuestionCard","state","option","answered","props","location","addOptionToState","e","setState","target","value","handleSubmitAnswer","preventDefault","dispatch","logedUserId","id","match","params","then","render","questions","logedUserAnswers","avatars","qId","backgroundColor","backgroundSize","mapStateToProps","logedUser","users","trim","console","log","question","answers","usersId","Object","keys","map","user","push","avatarURL"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Menu from './Menu'\r\nimport { handleSaveAnswer } from '../actions/shared'\r\n\r\n\r\nclass QuestionCard extends Component {\r\n  state= {\r\n    option: '',\r\n    answered: this.props.location.state.answered,\r\n  }\r\n\r\n  addOptionToState = (e) => {\r\n        this.setState({ option: e.target.value })\r\n  }\r\n\r\n  handleSubmitAnswer = (e) => {\r\n    e.preventDefault()\r\n    const { dispatch, logedUserId } = this.props\r\n    // const { id } = this.props.location.state\r\n    const id = this.props.match.params.id\r\n    const { option } = this.state\r\n\r\n    dispatch(handleSaveAnswer(logedUserId, id, option ))\r\n    .then(() => this.setState({ answered: true }))\r\n  }\r\n\r\n  render() {\r\n    const { questions,logedUserAnswers, avatars, qId}= this.props\r\n   const { answered } = this.state\r\n\r\n       return(\r\n         <div >\r\n           <Menu />\r\n            <div className='container card'>\r\n              <p>{qId}</p>\r\n             <div className='questionAuthor'>\r\n               <p >author</p>\r\n               <div className='user-avatar'\r\n                style= {{\r\n                       backgroundColor: 'LightSteelBlue' ,\r\n\r\n                       backgroundSize: '80px 100px',\r\n                     }}\r\n               ></div>\r\n             </div>\r\n           </div>\r\n       </div>\r\n       )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, props) {\r\n  const {questions, logedUser, users} = state\r\n  const qId = props.match.params.id.trim()\r\n  console.log(qId)\r\n  const logedUserId = logedUser.id\r\n\r\n   const question = questions[qId]\r\n  const logedUserAnswers = users[logedUserId].answers\r\n  const usersId = Object.keys(users)\r\n  const avatars = []\r\n  usersId.map((user) =>\r\n    avatars.push([user,users[user].avatarURL ])\r\n  )\r\n\r\n  return {\r\n    logedUserId,\r\n    questions,\r\n    logedUserAnswers,\r\n    avatars,\r\n    qId,\r\n    question\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps) (QuestionCard)\r\n// const author= questions[id].author\r\n//\r\n// const userAvatar = avatars.filter(\r\n//   (a) => (a[0]===author)\r\n// )\r\n//\r\n// const optionOne= questions[id].optionOne.text\r\n// const optionTwo= questions[id].optionTwo.text\r\n// const answer= logedUserAnswers[id]\r\n// const nrAnsOne= questions[id].optionOne.votes.length\r\n// const nrAnsTwo= questions[id].optionTwo.votes.length\r\n// const nrAns = nrAnsOne + nrAnsTwo\r\n//\r\n// const percent= (partialValue, totalValue) => (\r\n//   (100 * partialValue) / totalValue\r\n// )\r\n"]},"metadata":{},"sourceType":"module"}