{"ast":null,"code":"var _jsxFileName = \"J:\\\\Karolina\\\\react projects\\\\would-you-rather\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Menu from './Menu';\nimport QuestionList from './QuestionList';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seeQuestion: true,\n      linkText: 'Show Answered Questions'\n    };\n\n    this.toggleQuestions = () => {\n      this.state.seeQuestion ? this.setState({\n        seeQuestion: false,\n        linkText: 'Show Unanswered Questions'\n      }) : this.setState({\n        seeQuestion: true,\n        linkText: 'Show Answered Questions'\n      });\n    };\n  }\n\n  render() {\n    const logedUserID = this.props.logedUserID;\n\n    if (logedUserID === '') {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n    } else {\n      const _this$props = this.props,\n            logedUserID = _this$props.logedUserID,\n            logedUserName = _this$props.logedUserName,\n            unanswered = _this$props.unanswered,\n            answered = _this$props.answered;\n      const _this$state = this.state,\n            seeQuestion = _this$state.seeQuestion,\n            linkText = _this$state.linkText;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Menu, {\n        name: logedUserName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.toggleQuestions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, linkText), seeQuestion ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(QuestionList, {\n        questionList: unanswered,\n        text: \"Unanswert Questions\",\n        answered: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(QuestionList, {\n        questionList: answered,\n        text: \"Answert Questions\",\n        answered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }))));\n    }\n  }\n\n}\n\nfunction mapStateToProps({\n  logedUser,\n  questions\n}) {\n  const logedUserID = logedUser.id;\n  const logedUserName = logedUser.name;\n  const questionsId = Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp);\n  const unansweredID = questionsId.filter(id => !questions[id].optionOne.votes.includes('johndoe') && !questions[id].optionTwo.votes.includes('johndoe'));\n  const answeredID = questionsId.filter(id => questions[id].optionOne.votes.includes('johndoe') || questions[id].optionTwo.votes.includes('johndoe'));\n  const unanswered = [];\n  unansweredID.map(id => {\n    unanswered.push([id, {\n      optionOne: questions[id].optionOne.text,\n      optionTwo: questions[id].optionTwo.text\n    }]);\n  });\n  const answered = [];\n  answeredID.map(id => {\n    answered.push([id, {\n      id: id,\n      optionOne: questions[id].optionOne.text,\n      optionTwo: questions[id].optionTwo.text\n    }]);\n  });\n  return {\n    logedUserID,\n    logedUserName,\n    unanswered,\n    answered\n  };\n}\n\nexport default connect(mapStateToProps)(Home);","map":{"version":3,"sources":["J:/Karolina/react projects/would-you-rather/src/components/Home.js"],"names":["React","Component","connect","Redirect","Menu","QuestionList","Home","state","seeQuestion","linkText","toggleQuestions","setState","render","logedUserID","props","logedUserName","unanswered","answered","mapStateToProps","logedUser","questions","id","name","questionsId","Object","keys","sort","a","b","timestamp","unansweredID","filter","optionOne","votes","includes","optionTwo","answeredID","map","push","text"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Menu from './Menu'\r\nimport QuestionList from './QuestionList'\r\n\r\nclass Home extends Component {\r\n  state= {\r\n    seeQuestion: true,\r\n    linkText: 'Show Answered Questions'\r\n  }\r\n\r\n  toggleQuestions = () => {\r\n    (this.state.seeQuestion) ?\r\n      this.setState({seeQuestion: false, linkText: 'Show Unanswered Questions',})\r\n    :\r\n      this.setState({seeQuestion: true, linkText: 'Show Answered Questions',})\r\n  }\r\n\r\n  render () {\r\n    const {logedUserID} = this.props\r\n     if (logedUserID === '') {\r\n       return (\r\n             <Redirect to= '/login' />\r\n       )\r\n     }\r\n\r\n    else  {\r\n       const {logedUserID, logedUserName, unanswered, answered, } = this.props\r\n       const { seeQuestion, linkText }= this.state\r\n\r\n      return (\r\n        <div className= 'container'>\r\n          <Menu name = {logedUserName}/>\r\n\r\n          <div>\r\n\r\n            <button onClick={ this.toggleQuestions }>{linkText}</button>\r\n\r\n            {(seeQuestion) ?\r\n              <div>\r\n                <QuestionList questionList={unanswered} text= 'Unanswert Questions' answered= {false} />\r\n              </div>\r\n              :\r\n              <div>\r\n                <QuestionList questionList={answered} text= 'Answert Questions'answered= {true}/>\r\n              </div>\r\n             }\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps ({logedUser, questions}) {\r\n  const logedUserID = logedUser.id\r\n  const logedUserName = logedUser.name\r\n  const questionsId = Object.keys(questions).sort((a,b) => questions[b].timestamp - questions[a].timestamp)\r\n\r\n  const unansweredID = questionsId.filter(\r\n    (id)=> (\r\n      !(questions[id].optionOne.votes.includes('johndoe')) && !(questions[id].optionTwo.votes.includes('johndoe'))\r\n    )\r\n  )\r\n  const answeredID = questionsId.filter(\r\n    (id)=> (\r\n      questions[id].optionOne.votes.includes('johndoe') || questions[id].optionTwo.votes.includes('johndoe')\r\n    )\r\n  )\r\n  const unanswered = []\r\n  unansweredID.map((id) => {\r\n    unanswered.push([id,{optionOne: questions[id].optionOne.text, optionTwo: questions[id].optionTwo.text}])\r\n  })\r\n  const answered = []\r\n  answeredID.map((id) => {\r\n    answered.push([id,{id:id, optionOne: questions[id].optionOne.text, optionTwo: questions[id].optionTwo.text}])\r\n  })\r\n\r\n  return {\r\n    logedUserID,\r\n    logedUserName,\r\n\r\n    unanswered,\r\n    answered,\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Home)\r\n"]},"metadata":{},"sourceType":"module"}